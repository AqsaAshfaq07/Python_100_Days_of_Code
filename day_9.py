# -*- coding: utf-8 -*-
"""DAY_9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xbQ5Ty84Mq7TMEjKy4Oq3HhHRM5XTRxC
"""

# Python Dictionaries
# Nesting

# Dictionaries
# key -> value
# table like structure

# definig a dictionary
programming_concepts = {
  'Bug' : "An error in a program that prevents the program from running as expected.",
  'Function' : "A piece of code you can call over and over again."
}

# access the elements of dictionary
programming_concepts['Bug']

# Adding new items to dictionary
programming_concepts['code'] = "A set of instructions"

# Creating an empty dictionary
empty_dict = {}

# Empty a dictionary
# programming_concepts = {}

# Redefine any value
programming_concepts['code'] = "A set of instructions to be processed by computer."

#  Redefine any key
programming_concepts['code_def'] = "A set of instructions to be processed by computer."

# Iterating over a dictionary
for key in programming_concepts:
  print(key)
  print(programming_concepts[key])

# GRADING PROGRAM

student_scores = {
  "Harry": 81,
  "Ron": 78,
  "Hermione": 99,
  "Draco": 74,
  "Neville": 62,
}

student_grades = {}

for key in student_scores:
    score = student_scores[key]

    if student_scores[key] >= 91:
        student_grades[key] = 'Outsanding'
    elif student_scores[key] >= 81:
        student_grades[key] = 'Exceeds Expectations'
    elif student_scores[key] >= 71:
        student_grades[key] = 'Acceptable'
    else:
        student_grades[key] = 'Pass'

print(student_grades)

# Nesting - something inside something - files in a folder
# {
#      key : "",
#      key : {
#          key : value
#      },
#      key : [   ]

#  }  -- lists and dictionaries listed inside a dictionary

# Nesting
capitals = {
    "France" : "Paris",
    "Germany" : "Berlin"
}

# Nesting a list in a dictionary
travel_log = {
    "France" : ["Paris", "Berlin", "xzifoe"],
    "Germany" : {
        "berlin" : "xyahor",
        "new" : 123
    }
}

# access 123
travel_log["Germany"]["new"]

# Course Challenge

travel_log = {
    "France" : {"visited" : "Paris",
        "not_visited" : "Berlin"},
    "Germany" : ["Berlin", "Hamburg", "Stuttgart"]
}

# DICTIONARY IN LIST

travel_log = [
{
    "country" : "France",
    "visits" : 12,
    "cities" : ["Paris", "Lille", "Dijon"]
},
{
    "country" : "Germany",
    "visits" : 5,
    "cities" : ["Berlin", "Hamburg", "Stuttgart"]
}
]

def add_new_country(country, visits, cities):
    new_country = {
        "country" : country,
        "visits" : visits,
        "cities" : cities
    }

    travel_log.append(new_country)

add_new_country("Russia", 3, ["Moscow", "Saint Petersburg"])

print(travel_log)

# BLIND AUCTION

print("Welcome to the Secret Auction Program!")

bid_auction = {}
if remaining_bidders == "yes":

    name = input("What is your name?: \n")
    bid = int(input("What's your bid amount?: \n$"))


    bid_auction[name] = bid

#     print(bid_auction)

    remaining_bidders = input("Are there any other bidders? Type 'yes' or 'no'")

else:
    for key in bid_auction:
        max_bid = max(bid_auction[key])

